openapi: "3.0.0"
servers:
  - url: https://api.coinform.eu/
    description: The Gateway API server adress
info:
  description: |
    This document describes the API exposed by Co-Inform's Misinformation Detection Modules Gateway.
    This Gateway is the single point of entrance of all the requests made by Co-Inform's Browser Plugin.
  version: "0.0.1"
  title: "Co-Inform Gateway API"
paths:
  /login:
    post:
      tags:
        - "Browser Plugin"
      summary: "Login a Plugin user"
      description: "Logs a Plugin user in to the platform"
      requestBody:
        description: "The user and password"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CoinformLoginUser"
      responses:
        200:
          description: "User sucesfully logged in"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthToken"
          headers:
            Set-Cookie:
              schema:
                type: "string"
                example: "renew-token=Ã¶ajhsfg7897w3r5h3r; Path=/; HttpOnly; Secure"
        401:
          description: "Not authorized. User is either not verified or supplied an incorrect password"
        404:
          description: "No such user registered with CoInform"
  /register:
    post:
      tags:
        - "Browser Plugin"
      summary: "Register a new Plugin user"
      description: "Registers a plugin user with the platform"
      requestBody:
        description: "The registration data"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CoinformRegisterUser"
      responses:
        201:
          description: "New CoInform user successfully created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccesfullResponse"
        400:
          description: "Something went horribly wrong"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /reset-password:
    post:
      tags:
        - "Browser Plugin"
      summary: "Password reset endpoint"
      description: "Allows a CoInform user who forgot its password to reset it"
      requestBody:
        description: "A JSON Object holding the users email"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        200:
          description: "User has successfully asked for a password reset."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccesfullResponse"
        400:
          description: "User could not be found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /renew-token:
    get:
      tags:
        - "Browser Plugin"
      summary: "Renew the authentication token"
      description: "For the Browser Plugin to allow longlived sessions"
      parameters:
        - in: "cookie"
          name: "renew-token"
          schema:
            type: "string"
          required: true
      security:
        - cookieAuth: []
      responses:
        200:
          description: "Successfully requested a new JWT token"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthToken"
        404:
          description: "No such user/cookie found"
  /change-password:
    post:
      tags:
        - "Browser Plugin"
      summary: "Change password"
      description: "Allows for a logged in CoInform user to change its password"
      security:
        - bearerAuth: []
      requestBody:
        description: "The body of the request containing the new and old password"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangePassword"
      responses:
        200:
          description: "Successfully changed the password for the user"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccesfullResponse"
        401:
          description: "Failed attempt to change password. User not logged in"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        403:
          description: "Failed attempt to change password. Old password did not match stored password"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /change-settings:
    post:
      tags:
        - "Browser Plugin"
      summary: "Change some settings for the user"
      security:
        - bearerAuth: []
      requestBody:
        description: "The body containing the new settings for the user"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangeSettings"
      responses:
        200:
          description: "Successfully changed the settings"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthToken"
        401:
          description: "Failed to change settings. User not logged in"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /exit:
    get:
      tags:
        - "Browser Plugin"
      summary: "To log out a logged in user"
      description: "Logs out a user logged in to the coinform system"
      security:
        - bearerAuth: []
      responses:
        200:
          description: "Coinform user successfully logged out"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccesfullResponse"
        401:
          description: "Coinform user could not be logged out (probably already is...)"
  /twitter/user:
    post:
      tags:
      - "Browser Plugin"
      summary: "Check a twitter user"
      description: "Sends a twitter user to be checked and return a 'query id'"
      operationId: "twitterUser"
      deprecated: true
      requestBody:
        description: "A twitter user"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TwitterUser"
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryResponse"
        400:
          description: "Invalid input"
  /twitter/tweet:
    post:
      tags:
      - "Browser Plugin"
      summary: "Check a tweet"
      description: "Sends a tweet to be checked and gives back a 'query id'"
      operationId: "checkSource"
      requestBody:
        description: "A tweet"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Tweet"
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryResponse"
        400:
          description: "Invalid input"
  /twitter/evaluate:
    post:
      tags:
        - "Browser Plugin"
      summary: "Give a accuracy review from a user"
      description: |
        Provide the Co-Inform platform with a accuracy review where a user have given a tweet a accuracy label, and a url to a source supporting this label.
      operationId: "evaluateTweet"
      security:
        - bearerAuth: []
      requestBody:
        description: "The evaluation data"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TweetEvaluation"
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccesfullResponse"
        400:
          description: "Invalid input"
        403:
          description: "Access Denied"
  /check-url:
    get:
      tags:
        - "Browser Plugin"
      summary: "Check a url for misinformativ content"
      description: |
        Provide a URL to the CoInform system to control for a user before a post is made
      parameters:
      - name: "source"
        in: "path"
        description: "the url to be checked"
        required: true
        schema:
          type: "string"
      responses:
        200:
          description: "the content from the module"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CheckUrl"
        400:
          description: "Something went wrong with the request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /twitter/evaluate/label:
    post:
      tags:
        - "Browser Plugin"
      summary: "Give a reaction to the assigned label"
      description: |
        Provide a reaction to the Co-Inform platform credibility label assigned to the tweet.
      security:
        - bearerAuth: []
      requestBody:
        description: "The reaction"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserLabelEvaluation"
      responses:
        201:
          description: "reaction registrated"
        400:
          description: "Invalid input"
        403:
          description: "Access Denied"
  /response/{query_id}/{debug}:
    get:
      tags:
      - "Browser Plugin"
      summary: "Get a response from a query"
      description: "Get the request from a previous query"
      operationId: "requestQueryId"
      parameters:
      - name: "query_id"
        in: "path"
        description: "the query_id given by an previous query"
        required: true
        schema:
          type: "string"
      - name: "debug"
        in: "path"
        description: "A string (can be anything, except empty) debug information"
        required: true
        schema:
            type: "string"
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryResponse"
        404:
          description: "no such query_id"
  /ruleengine/test:
    post:
      tags:
        - "Browser Plugin"
      summary: "Test the rule engine"
      description: "Get the response from the rule engine for a set of test values"
      operationId: "ruleEngineTest"
      requestBody:
        description: "rule engine test values"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RuleEngineTestInput"
      responses:
        200:
          description: "ok"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RuleEngineOutput"
        400:
          description: "not valid input"
  /module/response/{transaction_id}:
    post:
      tags:
      - "Modules"
      summary: "post a finished module query"
      description: "Post a finished query"
      parameters:
      - in: "path"
        name: "transaction_id"
        description: "the transaction_id given by the gateway at the post of the query"
        required: true
        schema:
          type: "string"
      requestBody:
        description: "Module query response"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ModuleResponse"
      responses:
        200:
          description: "successful operation"
#       401:
#         description: "unauthorized operation"
        400:
          description: "Bad request, malformed JSON"
        404:
          description: "no such transaction_id"
  /external/evaluation:
    post:
      tags:
      - "draft"
      summary: "recieve a review from an external source"
      description: "recive a review from an external source"
      requestBody:
        description: "A review rating"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Review"
      responses:
        200:
          description: "successful operation"
        401:
          description: "unauthorized operation"
        400:
          description: "Bad request, malformed JSON"
components:
  schemas:
    QueryId:
      type: "string"
    QueryStatus:
      type: "string"
      enum:
        - "done"
        - "partly_done"
        - "in_progress"
    CredibilityLabel:
      type: "string"
      enum:
        - "credible"
        - "mostly_credible"
        - "mostly_not_credible"
        - "not_credible"
        - "not_verifiable"
    AccuracyLabel:
      type: "string"
      enum:
        - "accurate"
        - "accurate_with_considerations"
        - "unsubstantiated"
        - "inaccurate_with_considerations"
        - "inaccurate"
    TwitterUser:
      type: "object"
      properties:
        #        user_id:
        #          type: "integer"
        #          format: "int64"
        screen_name:
          type: "string"
    Tweet:
      type: "object"
      properties:
        tweet_id:
          type: "integer"
          format: "int64"
        tweet_author:
          type: "string"
        tweet_text:
          type: "string"
    TweetEvaluation:
      type: "object"
      properties:
        tweet_id:
          type: "string"
          example: "123479208745723476"
        comment:
          type: "string"
          example: "some comment the user makes about the evaluation"
        rating:
          $ref: "#/components/schemas/AccuracyLabel"
        supportingUrl:
          type: "array"
          items:
            type: "string"
            example: "https://www.som-site.com/with-a-supporting-text"
        url:
          type: "string"
          example: "https://twitter.com/realDonaldTrump/status/123479208745723476"
        request_factcheck:
          type: "boolean"
          example: true
    UserEvaluation:
      type: "object"
      properties:
        label:
          $ref: "#/components/schemas/AccuracyLabel"
        url:
          type: "string"
        comment:
          type: "string"
    UserEvaluationRegistered:
      type: "object"
      properties:
        evaluation_id:
          type: "string"
    UserLabelEvaluation:
      type: "object"
      properties:
        tweet_id:
          type: "string"
          example: "123479208745723476"
        rated_credibility:
          type: "string"
          example: "not_credible"
        rated_moduleResponse:
          type: "string"
          example: "2546jv37lj86c3v5678m454c84g7c8487cn478cn485hk6dg4848d4ghg478d478ggn48"
        url:
          type: "string"
          example: "https://twitter.com/realDonaldTrump/status/123479208745723476"
        reaction:
          $ref: "#/components/schemas/UserLabelReaction"
    UserLabelReaction:
      type: "string"
      enum:
        - "agree"
        - "disagree"
    QueryResponse:
      type: "object"
      properties:
        query_id:
          $ref: "#/components/schemas/QueryId"
        status:
          $ref: "#/components/schemas/QueryStatus"
        response:
          type: "object"
          properties:
            rule_engine:
              $ref: "#/components/schemas/RuleEngineOutput"
        module_response_code:
          type: "object"
    RuleEngineOutput:
      type: "object"
      properties:
        final_credibility:
          $ref: "#/components/schemas/CredibilityLabel"
        module_values:
          $ref: "#/components/schemas/ModuleValues"
    RuleEngineTestInput:
      type: "object"
      properties:
        misinfome:
          type: "object"
          properties:
            cred:
              type: "number"
              format: "float"
            conf:
              type: "number"
              format: "float"
        stance:
          type: "object"
          properties:
            cred:
              type: "number"
              format: "float"
            conf:
              type: "number"
              format: "float"
        claim_credibility:
          type: "object"
          properties:
            cred:
              type: "number"
              format: "float"
            conf:
              type: "number"
              format: "float"
    ModuleValues:
      type: "object"
      properties:
        misinfome:
          $ref: "#/components/schemas/Values"
        content_analysis:
          $ref: "#/components/schemas/Values"
        claim_similarity:
          $ref: "#/components/schemas/Values"
    Values:
      type: "object"
      properties:
        confidence:
          type: "number"
          format: "float"
        credibility:
          type: "number"
          format: "float"
    ModuleResponse:
      type: "object"
      properties:
        response:
          type: "object"
    User:
      type: "object"
      properties:
        email:
          type: "string"
    CoinformLoginUser:
      type: "object"
      properties:
        email:
          type: "string"
        password:
          type: "string"
    CoinformRegisterUser:
      type: "object"
      properties:
        email:
          type: "string"
        password:
          type: "string"
        research:
          type: "boolean"
        communication:
          type: "boolean"
    AuthToken:
      type: "object"
      properties:
        token:
          type: "string"
    SuccesfullResponse:
      type: "object"
      properties:
        status:
          type: "string"
    ErrorResponse:
      type: "object"
      properties:
        error:
          type: "string"
    ChangePassword:
      type: "object"
      properties:
        oldPassword:
          type: "string"
        newPassword:
          type: "string"
    ChangeSettings:
      type: "object"
      properties:
        research:
          type: "boolean"
        communication:
          type: "boolean"
    CheckUrl:
      type: "object"
      properties:
        credibility:
          type: "object"
          properties:
            value:
              type: "number"
              format: "float"
            confidence:
              type: "number"
              format: "float"
        assesments:
          type: "array"
          items:
            type: "object"
            description: "the different assesments made by the module"
        item_reviewed:
          type: "string"
          example: "https://www.breitbart.com/clips/2020/04/05/stephen-moore-on-coronavirus-impact-we-are-facing-a-potential-great-depression-scenario/"
    Review:
      type: "object"
      properties:
        context:
          type: "string"
          example: "http://schema.org"
        type:
          type: "string"
          example: "Review"
        url:
          type: "string"
          example: "http://truly.media/path/to/resource/for/this/review?"
        author:
          $ref: "#/components/schemas/Author"
        text:
          type: "string"
          example: "The Tweet is accurate/inaccurate because ..."
        name:
          type: "string"
          example: "accurate"
        reviewAspect:
          type: string
          example: "accuracy"
        reviewRating:
          $ref: "#/components/schemas/ReviewRating"
        itemReviewed:
          $ref: "#/components/schemas/ItemReviewed"
        dateCreated:
          type: string
          format: date-time
          example: "2020-05-08T10:16:29.130Z"
    Author:
      type: object
      properties:
        type:
          type: string
          example: "Organization"
        url:
          type: string
          example: "http://truly.media"
        name:
          type: string
          example: "Truly-media"
        comment:
          type: string
          example: "Alternatively, this can be information about the Person or fact-checker Organization that used the SOMA platform"
    ReviewRating:
      type: object
      properties:
        context:
          type: string
          example: "http://schema.org"
        type:
          type: string
          example: "Rating"
        ratingValue:
          type: string
          example: "accurate"
        possibleRatingValues:
          type: array
          items:
            type: string
          example: ["accurate", "mostly accurate", "mostly inaccurate", "inaccurate", "not verifiable"]
        reviewAspect:
          type: string
          example: "accuracy"
        reviewExplanation:
          type: string
    ItemReviewed:
      type: object
      properties:
        type:
          type: string
          example: SocialMediaPost
        url:
          type: string
          example: "https://twitter.com/ifrc/status/1258685075694256129"

  securitySchemes:
    bearerAuth:
      type: "http"
      scheme: "bearer"
      bearerFormat: "JWT"
    cookieAuth:
      type: "apiKey"
      in: "cookie"
      name: "renew-token"

