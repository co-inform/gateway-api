openapi: "3.0.0"
servers:
  - url: https://api.coinform.eu/
    description: The Gateway API server adress
info:
  description: |
    This document describes the API exposed by Co-Inform's Misinformation Detection Modules Gateway.
    This Gateway is the single point of entrance of all the requests made by Co-Inform's Browser Plugin.
  version: "0.0.1"
  title: "Co-Inform Gateway API"
paths:
  /login:
    post:
      tags:
        - "Browser Plugin"
      summary: "Login a Plugin user"
      description: "Logs a Plugin user in to the platform"
      requestBody:
        description: "The user and password"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CoinformLoginUser"
      responses:
        200:
          description: "User sucesfully logged in"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthToken"
        404:
          description: "No such user registered with CoInform"
  /register:
    post:
      tags:
        - "Browser Plugin"
      summary: "Register a new Plugin user"
      description: "Registers a plugin user with the platform"
      requestBody:
        description: "The registration data"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CoinformRegisterUser"
      responses:
        201:
          description: "New CoInform user successfully created"
          content:
            application/json:
              $ref: "#/components/schemas/SuccesfullResponse"
        400:
          description: "SOmething went horribly wrong"
          content:
            application/json:
              $ref: "#/components/schemas/ErrorResponse"
  /twitter/user:
    post:
      tags:
      - "Browser Plugin"
      summary: "Check a twitter user"
      description: "Sends a twitter user to be checked and return a 'query id'"
      operationId: "twitterUser"
      deprecated: true
      requestBody:
        description: "A twitter user"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TwitterUser"
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryResponse"
        400:
          description: "Invalid input"
  /twitter/tweet:
    post:
      tags:
      - "Browser Plugin"
      summary: "Check a tweet"
      description: "Sends a tweet to be checked and gives back a 'query id'"
      operationId: "checkSource"
      requestBody:
        description: "A tweet"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Tweet"
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryResponse"
        400:
          description: "Invalid input"
  /twitter/evaluate:
    post:
      tags:
        - "Browser Plugin"
      summary: "Send a user-provided tweet evaluation"
      description: |
        The users can provide feedback of an analysis made on a tweet. For this,
        a label and optionally a URL can be sent.
      operationId: "evaluateTweet"
      security:
        - bearerAuth: []
      requestBody:
        description: "The evaluation data"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TweetEvaluation"
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserEvaluationRegistered"
        400:
          description: "Invalid input"
        403:
          description: "Access Denied"

  /response/{query_id}/{debug}:
    get:
      tags:
      - "Browser Plugin"
      summary: "Get a response from a query"
      description: "Get the request from a previous query"
      operationId: "requestQueryId"
      parameters:
      - name: "query_id"
        in: "path"
        description: "the query_id given by an previous query"
        required: true
        schema:
          type: "string"
      - name: "debug"
        in: "path"
        description: "A string (can be anything, except empty) debug information"
        required: false
        schema:
            type: "string"
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryResponse"
        404:
          description: "no such query_id"
  /ruleengine/test:
    post:
      tags:
        - "Browser Plugin"
      summary: "Test the rule engine"
      description: "Get the response from the rule engine for a set of test values"
      operationId: "ruleEngineTest"
      requestBody:
        description: "rule engine test values"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RuleEngineTestInput"
      responses:
        200:
          description: "ok"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RuleEngineOutput"
        400:
          description: "not valid input"
  /module/response/{transaction_id}:
    post:
      tags:
      - "Modules"
      summary: "post a finished module query"
      description: "Post a finished query"
      parameters:
      - in: "path"
        name: "transaction_id"
        description: "the transaction_id given by the gateway at the post of the query"
        required: true
        schema:
          type: "string"
      requestBody:
        description: "Module query response"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ModuleResponse"
      responses:
        200:
          description: "successful operation"
#       401:
#         description: "unauthorized operation"
        400:
          description: "Bad request, malformed JSON"
        404:
          description: "no such transaction_id"
components:
  schemas:
    QueryId:
      type: "string"
    QueryStatus:
      type: "string"
      enum:
        - "done"
        - "partly_done"
        - "in_progress"
    CredibilityLabel:
      type: "string"
      enum:
        - "credible"
        - "mostly_credible"
        - "credibility_uncertain"
        - "mostly_not_credible"
        - "not_credible"
        - "not_verifiable"
    AccuracyLabel:
      type: "string"
      enum:
        - "accurate"
        - "accurate_with_considerations"
        - "unsubstantiated"
        - "inaccurate_with_considerations"
        - "inaccurate"
    TwitterUser:
      type: "object"
      properties:
        #        user_id:
        #          type: "integer"
        #          format: "int64"
        screen_name:
          type: "string"
    Tweet:
      type: "object"
      properties:
        tweet_id:
          type: "integer"
          format: "int64"
        tweet_author:
          type: "string"
        tweet_text:
          type: "string"
    TweetEvaluation:
      type: "object"
      properties:
        tweet_id:
          type: "string"
        evaluation:
          $ref: "#/components/schemas/UserEvaluation"
    UserEvaluation:
      type: "object"
      properties:
        label:
          $ref: "#/components/schemas/AccuracyLabel"
        url:
          type: "string"
        comment:
          type: "string"
    UserEvaluationRegistered:
      type: "object"
      properties:
        evaluation_id:
          type: "string"
    QueryResponse:
      type: "object"
      properties:
        query_id:
          $ref: "#/components/schemas/QueryId"
        status:
          $ref: "#/components/schemas/QueryStatus"
        response:
          type: "object"
          properties:
            rule_engine:
              $ref: "#/components/schemas/RuleEngineOutput"
        module_response_code:
          type: "object"
    RuleEngineOutput:
      type: "object"
      properties:
        final_credibility:
          $ref: "#/components/schemas/CredibilityLabel"
    RuleEngineTestInput:
      type: "object"
      properties:
        misinfome:
          type: "object"
          properties:
            cred:
              type: "number"
              format: "float"
            conf:
              type: "number"
              format: "float"
        stance:
          type: "object"
          properties:
            cred:
              type: "number"
              format: "float"
            conf:
              type: "number"
              format: "float"
        claim_credibility:
          type: "object"
          properties:
            cred:
              type: "number"
              format: "float"
            conf:
              type: "number"
              format: "float"
    ModuleResponse:
      type: "object"
      properties:
        response:
          type: "object"
    CoinformLoginUser:
      type: "object"
      properties:
        email:
          type: "string"
        password:
          type: "string"
    CoinformRegisterUser:
      type: "object"
      properties:
        email:
          type: "string"
        password:
          type: "string"
    AuthToken:
      type: "object"
      properties:
        token:
          type: "string"
    SuccesfullResponse:
      type: "object"
      properties:
        status:
          type: "string"
    ErrorResponse:
      type: "object"
      properties:
        error:
          type: "string"
  securitySchemes:
    bearerAuth:
      type: "http"
      scheme: "bearer"
      bearerFormat: "JWT"

